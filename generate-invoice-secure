#!/usr/bin/env python3
"""
Secure Invoice Generator - Main script with Google Service Account authentication
"""

import os
import sys
import json
from typing import List, Dict, Any

# Add src directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from sheets_reader_secure import SheetsReader
from invoice_generator import InvoiceGenerator
from pdf_converter import PDFConverter

def main():
    """Main function to generate invoice with secure authentication."""
    try:
        print("🚀 NES Invoice Generator (Secure) - Starting...")
        
        # Load configuration
        config_path = "config_secure.json"
        if not os.path.exists(config_path):
            print(f"❌ Configuration file not found: {config_path}")
            return False
        
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # Check for credentials file
        credentials_path = config["google_sheets"]["credentials_path"]
        if not os.path.exists(credentials_path):
            print(f"❌ Service account credentials not found: {credentials_path}")
            print("📋 Please follow the setup instructions to create service account credentials")
            return False
        
        # Initialize secure sheets reader
        print("🔐 Authenticating with Google Sheets...")
        sheets_reader = SheetsReader(
            credentials_path=credentials_path,
            spreadsheet_id=config["google_sheets"]["spreadsheet_id"]
        )
        
        # Get spreadsheet info
        spreadsheet_info = sheets_reader.get_spreadsheet_info()
        print(f"📊 Connected to: {spreadsheet_info['title']}")
        print(f"🔑 Service Account: {spreadsheet_info['service_account_email']}")
        
        # Get WIP entries
        print("📋 Reading WIP entries from spreadsheet...")
        wip_entries = sheets_reader.get_wip_entries(config["google_sheets"]["worksheet_name"])
        
        if not wip_entries:
            print("ℹ️  No WIP entries found in spreadsheet")
            print("💡 Make sure entries are marked as 'WIP' in the Paid column")
            return False
        
        # Get invoice number from WIP entries
        invoice_number = sheets_reader.get_invoice_number(wip_entries)
        
        print(f"📄 Generating invoice {invoice_number} for {len(wip_entries)} WIP entries...")
        
        # Calculate totals
        total_hours = sum(entry["hours"] for entry in wip_entries)
        categories = {}
        for entry in wip_entries:
            category = entry.get("category", "Enhancement")
            categories[category] = categories.get(category, 0) + entry["hours"]
        
        print(f"⏱️  Total Hours: {total_hours}")
        for category, hours in categories.items():
            print(f"   - {category}: {hours} hours")
        
        # Initialize invoice generator
        invoice_generator = InvoiceGenerator("config_secure.json")
        
        # Generate invoice data
        invoice_data = invoice_generator.generate_invoice(wip_entries, invoice_number)
        
        # Generate HTML
        html_content = invoice_generator.generate_html(invoice_data)
        
        # Save files
        files_created = invoice_generator.save_files(invoice_data, html_content)
        
        # Generate PDF if enabled
        if config["output"]["generate_pdf"]:
            print("📄 Converting to PDF...")
            pdf_converter = PDFConverter()
            pdf_path = pdf_converter.convert_html_to_pdf(
                files_created["html"], 
                invoice_number
            )
            if pdf_path:
                files_created["pdf"] = pdf_path
        
        # Display results
        print("\n✅ Invoice generation completed successfully!")
        print(f"💰 Invoice Amount: ${invoice_data['summary']['balance_due']:,.0f}")
        print("\n📁 Generated Files:")
        for file_type, file_path in files_created.items():
            file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
            print(f"   - {file_type.upper()}: {file_path} ({file_size:,} bytes)")
        
        # Ask if user wants to update WIP entries to Paid
        print("\n🔄 Update WIP entries to 'Paid' status? (y/n): ", end="")
        response = input().strip().lower()
        
        if response in ['y', 'yes']:
            print("🔄 Updating WIP entries to Paid...")
            success = sheets_reader.update_wip_to_billed(
                wip_entries, 
                config["google_sheets"]["worksheet_name"]
            )
            if success:
                print("✅ Successfully updated WIP entries to Paid")
            else:
                print("⚠️  Warning: Could not update all WIP entries")
        else:
            print("ℹ️  WIP entries left unchanged")
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

