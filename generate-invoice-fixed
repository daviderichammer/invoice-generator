#!/usr/bin/env python3
"""
Enhanced invoice generator that finds ALL entries for an invoice number
"""

import os
import sys
import json
from typing import List, Dict, Any

# Add src directory to path
sys.path.append(os.path.join(os.path.dirname(__file__), 'src'))

from sheets_reader_enhanced import SheetsReaderEnhanced
from invoice_generator import InvoiceGenerator
from pdf_converter import PDFConverter

def find_all_invoice_entries(sheets_reader, invoice_number, worksheet_name="Sheet1"):
    """Find ALL entries for a specific invoice number, regardless of status."""
    try:
        worksheet = sheets_reader.spreadsheet.worksheet(worksheet_name)
        all_values = worksheet.get_all_values()
        
        if not all_values:
            return []
        
        headers = all_values[0]
        
        # Find column indices
        date_col = sheets_reader._find_column_index(headers, ['date'])
        hours_col = sheets_reader._find_column_index(headers, ['hours'])
        category_col = sheets_reader._find_column_index(headers, ['category'])
        task_col = sheets_reader._find_column_index(headers, ['task', 'work', 'task/work'])
        persons_col = sheets_reader._find_column_index(headers, ['persons'])
        invoice_col = sheets_reader._find_column_index(headers, ['invoice'])
        status_col = sheets_reader._find_column_index(headers, ['paid', 'status'])
        
        invoice_entries = []
        
        # Process each row (skip header row)
        for row_idx, row in enumerate(all_values[1:], start=2):
            if len(row) <= max(date_col, hours_col, category_col, task_col, persons_col, invoice_col, status_col):
                continue  # Skip incomplete rows
            
            # Check if this entry matches the invoice number
            row_invoice = row[invoice_col].strip() if invoice_col < len(row) else ""
            status = row[status_col].strip().upper() if status_col < len(row) else ""
            
            if row_invoice == invoice_number:
                try:
                    # Extract data from row
                    date = row[date_col].strip() if date_col < len(row) else ""
                    hours_str = row[hours_col].strip() if hours_col < len(row) else "0"
                    category = row[category_col].strip() if category_col < len(row) else "Enhancement"
                    description = row[task_col].strip() if task_col < len(row) else ""
                    persons = row[persons_col].strip() if persons_col < len(row) else ""
                    
                    # Parse hours (handle decimal values)
                    try:
                        hours = float(hours_str)
                    except ValueError:
                        print(f"⚠️  Warning: Invalid hours value '{hours_str}' in row {row_idx}, skipping")
                        continue
                    
                    # Skip entries with no hours or invalid data
                    if hours <= 0 or not date or not description:
                        continue
                    
                    invoice_entry = {
                        "date": date,
                        "hours": hours,
                        "category": category,
                        "description": description,
                        "persons": persons,
                        "invoice": row_invoice,
                        "status": status,
                        "row_number": row_idx  # Store row number for potential updates
                    }
                    
                    invoice_entries.append(invoice_entry)
                    
                except Exception as e:
                    print(f"⚠️  Warning: Error processing row {row_idx}: {e}")
                    continue
        
        return invoice_entries
        
    except Exception as e:
        print(f"❌ Error finding invoice entries: {e}")
        return []

def main():
    """Main function to generate invoice with secure authentication and complete billed updates."""
    try:
        print("🚀 NES Invoice Generator (Enhanced & Fixed) - Starting...")
        
        # Load configuration
        config_path = "config_secure.json"
        if not os.path.exists(config_path):
            print(f"❌ Configuration file not found: {config_path}")
            return False
        
        with open(config_path, 'r') as f:
            config = json.load(f)
        
        # Check for credentials file
        credentials_path = config["google_sheets"]["credentials_path"]
        if not os.path.exists(credentials_path):
            print(f"❌ Service account credentials not found: {credentials_path}")
            print("📋 Please follow the setup instructions to create service account credentials")
            return False
        
        # Initialize enhanced sheets reader
        print("🔐 Authenticating with Google Sheets...")
        sheets_reader = SheetsReaderEnhanced(
            credentials_path=credentials_path,
            spreadsheet_id=config["google_sheets"]["spreadsheet_id"]
        )
        
        # Get spreadsheet info
        spreadsheet_info = sheets_reader.get_spreadsheet_info()
        print(f"📊 Connected to: {spreadsheet_info['title']}")
        print(f"🔑 Service Account: {spreadsheet_info['service_account_email']}")
        
        # Get WIP entries
        print("📋 Reading WIP entries from spreadsheet...")
        wip_entries = sheets_reader.get_wip_entries(config["google_sheets"]["worksheet_name"])
        
        if not wip_entries:
            print("ℹ️  No WIP entries found in spreadsheet")
            print("💡 Make sure entries are marked as 'WIP' in the Status column")
            return False
        
        # Get invoice number from WIP entries
        invoice_number = sheets_reader.get_invoice_number(wip_entries)
        
        print(f"📄 Generating invoice {invoice_number} for {len(wip_entries)} WIP entries...")
        
        # Calculate totals
        total_hours = sum(entry["hours"] for entry in wip_entries)
        categories = {}
        for entry in wip_entries:
            category = entry.get("category", "Enhancement")
            categories[category] = categories.get(category, 0) + entry["hours"]
        
        print(f"⏱️  Total Hours: {total_hours}")
        for category, hours in categories.items():
            print(f"   - {category}: {hours} hours")
        
        # Initialize invoice generator
        invoice_generator = InvoiceGenerator("config_secure.json")
        
        # Generate invoice data
        invoice_data = invoice_generator.generate_invoice(wip_entries, invoice_number)
        
        # Generate HTML
        html_content = invoice_generator.generate_html(invoice_data)
        
        # Save files
        files_created = invoice_generator.save_files(invoice_data, html_content)
        
        # Generate PDF if enabled
        if config["output"]["generate_pdf"]:
            print("📄 Converting to PDF...")
            pdf_converter = PDFConverter()
            pdf_path = pdf_converter.convert_html_to_pdf(
                files_created["html"], 
                invoice_number
            )
            if pdf_path:
                files_created["pdf"] = pdf_path
        
        # Display results
        print("\n✅ Invoice generation completed successfully!")
        print(f"💰 Invoice Amount: ${invoice_data['summary']['balance_due']:,.0f}")
        print("\n📁 Generated Files:")
        for file_type, file_path in files_created.items():
            file_size = os.path.getsize(file_path) if os.path.exists(file_path) else 0
            print(f"   - {file_type.upper()}: {file_path} ({file_size:,} bytes)")
        
        # Ask if user wants to update ALL entries for this invoice to Billed with formatting
        print(f"\n🔄 Update ALL entries for {invoice_number} to 'Billed' status with orange highlighting? (y/n): ", end="")
        response = input().strip().lower()
        
        if response in ['y', 'yes']:
            print(f"🔍 Finding ALL entries for {invoice_number} (including any already marked as Billed)...")
            
            # Find ALL entries for this invoice number
            all_invoice_entries = find_all_invoice_entries(
                sheets_reader, 
                invoice_number, 
                config["google_sheets"]["worksheet_name"]
            )
            
            if all_invoice_entries:
                # Filter to only WIP entries for updating
                wip_to_update = [entry for entry in all_invoice_entries if entry.get("status", "").upper() == "WIP"]
                
                print(f"📊 Found {len(all_invoice_entries)} total entries for {invoice_number}")
                print(f"🔄 {len(wip_to_update)} entries need status update from WIP to Billed")
                
                if wip_to_update:
                    print("🔄 Updating WIP entries to Billed with correct orange highlighting...")
                    success = sheets_reader.update_wip_to_billed_with_formatting(
                        wip_to_update, 
                        config["google_sheets"]["worksheet_name"]
                    )
                    if success:
                        print("✅ Successfully updated WIP entries to Billed")
                    else:
                        print("⚠️  Warning: Could not update all WIP entries")
                
                # Now apply correct formatting to ALL entries for this invoice
                print(f"🎨 Applying correct orange highlighting to ALL {len(all_invoice_entries)} entries for {invoice_number}...")
                
                # Use the enhanced method to apply formatting to all entries
                from googleapiclient.discovery import build
                from google.oauth2.service_account import Credentials
                
                # Get the correct reference color
                credentials = Credentials.from_service_account_file(
                    credentials_path, 
                    scopes=['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
                )
                service = build('sheets', 'v4', credentials=credentials)
                
                # Create format requests for all invoice entries
                format_requests = []
                reference_color = {"red": 1, "green": 0.6}  # Correct orange color
                
                for entry in all_invoice_entries:
                    row_number = entry.get("row_number")
                    if row_number:
                        format_request = {
                            "repeatCell": {
                                "range": {
                                    "sheetId": 0,
                                    "startRowIndex": row_number - 1,
                                    "endRowIndex": row_number,
                                    "startColumnIndex": 0,
                                    "endColumnIndex": 7
                                },
                                "cell": {
                                    "userEnteredFormat": {
                                        "backgroundColor": reference_color
                                    }
                                },
                                "fields": "userEnteredFormat.backgroundColor"
                            }
                        }
                        format_requests.append(format_request)
                
                if format_requests:
                    body = {"requests": format_requests}
                    service.spreadsheets().batchUpdate(
                        spreadsheetId=config["google_sheets"]["spreadsheet_id"],
                        body=body
                    ).execute()
                    
                    print(f"✅ Applied correct orange highlighting to ALL {len(format_requests)} rows for {invoice_number}")
                    print("🎨 All rows should now match the reference formatting exactly")
                
            else:
                print(f"⚠️  No entries found for {invoice_number}")
        else:
            print("ℹ️  Entries left unchanged")
        
        return True
        
    except Exception as e:
        print(f"❌ Error: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)

